#ifndef ALIFE_OBJECTS_HPP
#define ALIFE_OBJECTS_HPP

#include <vector>

#include "animal.hpp"
#include "environment.hpp"

/**
 * generic object, to be derived by all objects
 * that will interact with Animals
 */

class Object
{
    public:
        // spatial location
        // objects are not moving
        const double x;
        const double y;
        Object(double xpos, double ypos);
        // interacts with an Animal, may cause consumption
        // of the object
        virtual void interact(Animal& animal) =0;
        // is the object consumed ?
        // if so, it should be destroyed by its owner
        virtual bool is_consumed() const =0;
        // vector of Pheromones generated by the object
        virtual std::vector<Pheromone> pheromones() const =0;
};

/**
 * generic object which generates a single
 * constant pheromone.
 */

class SingleSmellObject: public Object
{
    private:
        int m_smell_id;
        double m_smell_intensity;
    public:
        SingleSmellObject(double xpos, double ypos,
                          int smell_id, double smell_intensity);
        virtual std::vector<Pheromone> pheromones() const;
};

/**
 * A consumable feeding object.
 */

class ConsumableFeed: public SingleSmellObject
{
    private:
        bool m_consumed;
        double m_energy_amount;

    public:
        ConsumableFeed(double xpos, double ypos,
                       double feeding_power,
                       int smell_id, double smell_intensity);
        virtual void interact(Animal& animal);
        virtual bool is_consumed() const;
};

/**
 * A non consumable threat.
 */

class PermanentTrap: public SingleSmellObject
{
    private:
        double m_damage_amount;

    public:
        PermanentTrap(double xpos, double ypos,
                      double damage_power,
                      int smell_id, double smell_intensity);
        virtual void interact(Animal& animal);
        virtual bool is_consumed() const;
};

#endif // ALIFE_OBJECTS_HPP
